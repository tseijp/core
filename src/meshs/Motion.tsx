// Auto-generated by https://github.com/react-spring/gltfjsx
// https://codesandbox.io/s/r3f-character-interaction-voef7?file=/src/Character.jsx:1209-1219
import * as THREE from "three"
import React, {useRef, useState} from "react"
import {useLoader,useFrame} from "react-three-fiber"
import {GLTFLoader} from "three/examples/jsm/loaders/GLTFLoader"
const defaultURL =
   ["/static/core/FallGuyDefalti.glb",
    "/static/core/FallGuyDefalti.png"]
export const Motion = ({
    gltfURL="/static/core/FallGuyHiphopDancing.glb",//defaultURL[0],
    textureURL=defaultURL[1],
    action=0, dark=true, size=50, ...props
}) => {
    const group   = useRef<any>(null)
    const gltf    = useLoader<any>(GLTFLoader, gltfURL)
    const texture = useLoader(THREE.TextureLoader, textureURL);
    const actions = useRef<any>(null)
    const [mixer] = useState<any>(() => new THREE.AnimationMixer(null as any))
    React.useEffect(() => {
        const num = -1<action && action<gltf.animations.length ? action: 0
        const idle = mixer.clipAction(gltf.animations[num], group.current)
        actions.current = { idle }
        actions.current.idle.play()
        return () => gltf.animations.forEach((clip:any) => mixer.uncacheClip(clip))
    }, [action, gltf.animations, mixer])
    useFrame((_, delta) => {mixer.update(delta)})
    return (
        <group ref={group} {...props} dispose={null}>
            <group scale={[.01,.01,.01]} rotation={[1.3,0,0]} position={[0,-1,2]}>
                <primitive object={gltf.nodes['mixamorigHips']} />
                <skinnedMesh
                    geometry={gltf.nodes["Body"].children[0].geometry}
                    skeleton={gltf.nodes["Body"].children[0].skeleton}>
                    <meshPhongMaterial attach="material" map={texture} skinning/>
                </skinnedMesh>
                <skinnedMesh
                    geometry={gltf.nodes["Body"].children[1].geometry}
                    skeleton={gltf.nodes["Body"].children[1].skeleton}
                    material={gltf.nodes["Body"].children[1].material}>
                </skinnedMesh>
                <skinnedMesh
                    geometry={gltf.nodes["Body"].children[2].geometry}
                    skeleton={gltf.nodes["Body"].children[2].skeleton}
                    material={gltf.nodes["Body"].children[2].material}>
                </skinnedMesh>
            </group>
        </group>
    )
}
//<primitive object={gltf.nodes["Scene"]} />
